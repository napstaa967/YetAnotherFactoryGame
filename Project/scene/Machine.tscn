[gd_scene load_steps=7 format=2]

[ext_resource path="res://textures/machinery/converter/converter.png" type="Texture" id=1]
[ext_resource path="res://textures/machinery/converter/converter_arrow.png" type="Texture" id=2]
[ext_resource path="res://textures/machinery/converter/converter_arrow_on.png" type="Texture" id=3]

[sub_resource type="GDScript" id=2]
resource_local_to_scene = true
script/source = "extends Area2D

export (Dictionary) var metadata = {
	\"type\": \"converter\",
	\"direction\": \"down\",
	\"sell\": 300,
	\"buy\": 600,
	\"elec\": 15,
	\"items\": {
		\"slot1\": {
			\"denom\": null,
			\"icon\": null,
			\"amount\": 0
		},
		\"slot2\": {
			\"denom\": null,
			\"icon\": null,
			\"amount\": 0
		}
	},
	\"placing\": false
}

var inventory_open = false

func _ready():
	get_node(\"ElecTimer\").set_wait_time(1)
	get_node(\"ElecTimer\").start()
	metadata = get_meta(\"metadata\").duplicate(true)
	self.set_meta(\"metadata\", get_meta(\"metadata\").duplicate(true))
	get_node(\"ConvertTimer\").set_wait_time(1)
	get_node(\"ConvertTimer\").one_shot = true
	monitoring = true
	var texturestuff
	var textureoverrides = {}
	var file = File.new()
	if !file.file_exists(BaseFuncs.moddedload(\"textures/machinery/converter/texture_override.json\")):
		texturestuff = \"textures/machinery/converter/converter.png\"
		match get_meta(\"metadata\").direction:
			\"down\":
				get_node(\"Sprite\").rotation_degrees = 0
			\"up\":
				get_node(\"Sprite\").rotation_degrees = 180
			\"left\":
				get_node(\"Sprite\").rotation_degrees = 90
			\"right\":
				get_node(\"Sprite\").rotation_degrees = 270
	else:
		file.open(BaseFuncs.moddedload(\"textures/machinery/converter/texture_override.json\"), File.READ)
	if file.is_open():
		textureoverrides = parse_json(file.get_as_text())
	texturestuff = BaseFuncs.loadoverrides(textureoverrides, get_node(\"Sprite\"), get_meta(\"metadata\"), texturestuff, \"normal\")
	get_node(\"Sprite\").texture = BaseFuncs.load_texture(texturestuff.tex)
	get_node(\"Sprite\").texture.set_size_override(Vector2(64,64))
	get_node(\"Sprite\").texture.set_flags(0)
	texturestuff = BaseFuncs.loadoverrides(textureoverrides, get_node(\"TextureProgress\"), get_meta(\"metadata\"), texturestuff, \"arrow\")
	if texturestuff.has(\"unhandled_overrides\") && texturestuff.unhandled_overrides.has(\"arrow\"):
		var target = get_node(\"TextureProgress\")
		for i in texturestuff.unhandled_overrides.arrow:
			var override = texturestuff.unhandled_overrides.arrow[i]
			if !override.has(\"enable\") || override.enable == true:
				if i == \"all\" || (i == get_meta(\"metadata\").direction || ((i == \"leftright\" && (get_meta(\"metadata\").direction == \"left\" || get_meta(\"metadata\").direction == \"right\")) || (i == \"updown\" && (get_meta(\"metadata\").direction == \"up\" || get_meta(\"metadata\").direction == \"down\")))):
					for ii in override:
						match ii:
							\"rotation\":
								if target is TextureProgress:
									target.rect_pivot_offset = Vector2(target.rect_size.x/2, target.rect_size.y/2)
									target.rect_rotation = override.rotation
							\"texture_progress_full\":
								if File.new().file_exists(BaseFuncs.moddedload(override[ii])):
									if typeof(texturestuff.tex) != TYPE_DICTIONARY:
										texturestuff.tex = {}
									texturestuff.tex.full = override.texture_progress_full
							\"texture_progress_empty\":
								if File.new().file_exists(BaseFuncs.moddedload(override[ii])):
									if typeof(texturestuff.tex) != TYPE_DICTIONARY:
										texturestuff.tex = {}
									texturestuff.tex.empty = override.texture_progress_empty
							\"use_default_rot\":
								if override[ii]:
									target.rect_pivot_offset = Vector2(target.rect_size.x/2, target.rect_size.y/2)
									target.rect_rotation = get_node(\"Sprite\").rotation_degrees
							\"auto_rotate\":
								if override.auto_rotate:
									if target is Sprite:
										match get_meta(\"metadata\").direction:
											\"down\":
												target.rotation_degrees = 0
											\"left\":
												target.rotation_degrees = 90
											\"up\":
												target.rotation_degrees = 180
											\"right\":
												target.rotation_degrees = 270
									else:
										target.rect_pivot_offset = Vector2(target.rect_size.x/2, target.rect_size.y/2)
										match get_meta(\"metadata\").direction:
											\"down\":
												target.rect_rotation = 0
											\"left\":
												target.rect_rotation = 90
											\"up\":
												target.rect_rotation = 180
											\"right\":
												target.rect_rotation = 270
	if typeof(texturestuff.tex) == TYPE_DICTIONARY:
		if texturestuff.tex.has(\"full\"):
			get_node(\"TextureProgress\").texture_under = BaseFuncs.load_texture(texturestuff.tex.full)
		if texturestuff.tex.has(\"empty\"):
			get_node(\"TextureProgress\").texture_progress = BaseFuncs.load_texture(texturestuff.tex.empty)
	elif typeof(texturestuff.tex) == TYPE_STRING:
		get_node(\"TextureProgress\").texture_under = BaseFuncs.load_texture(texturestuff.tex)
		get_node(\"TextureProgress\").texture_progress = BaseFuncs.load_texture(texturestuff.tex)
	get_node(\"TextureProgress\").set_size(Vector2(64,64))
	get_node(\"TextureProgress\").texture_under.set_flags(0)
	get_node(\"TextureProgress\").texture_progress.set_flags(0)

func _process(_delta):
	if get_node(\"ConvertTimer\").is_stopped():
		get_node(\"TextureProgress\").value = 5
	else:
		get_node(\"TextureProgress\").value = stepify(get_node(\"ConvertTimer\").time_left*5, 0.01)
	if get_meta(\"metadata\").placing == false:
		var areas = get_overlapping_areas()
		var itemareas = []
		for area in areas:
			if area.is_queued_for_deletion():
				continue
			if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").placing == true:
				continue
			if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").type != \"remove\":
				if area.get_meta(\"metadata\").type == \"item\":
					itemareas.append(area)
				if area.get_meta(\"metadata\").type != \"item\":
					if area.position == position:
						return area.free()
		for area in itemareas:
			if area.is_queued_for_deletion():
				continue
			if area.has_meta(\"metadata\"):
				var metadatacopy = area.get_meta(\"metadata\").duplicate(true)
				if (area.position == position || metadatacopy.direction == null) && area.get_child(2).get_overlapping_areas().has(self):
					if metadatacopy.justplaced == false:
						if get_meta(\"metadata\").items.slot1.denom == null:
							var copying = get_meta(\"metadata\")
							copying.items.slot1.denom = metadatacopy.denom
							copying.items.slot1.icon = metadatacopy.spritepath
							copying.items.slot1.amount = 1
							set_meta(\"metadata\", copying.duplicate(true))
						elif metadatacopy.denom == get_meta(\"metadata\").items.slot1.denom && get_meta(\"metadata\").items.slot1.amount < 99:
							var copying = get_meta(\"metadata\")
							copying.items.slot1.amount += 1
							set_meta(\"metadata\", copying.duplicate(true))
						elif get_meta(\"metadata\").items.slot2.denom == null:
							var copying = get_meta(\"metadata\")
							copying.items.slot2.denom = metadatacopy.denom
							copying.items.slot2.icon = metadatacopy.spritepath
							copying.items.slot2.amount = 1
							set_meta(\"metadata\", copying.duplicate(true))
						elif metadatacopy.denom == get_meta(\"metadata\").items.slot2.denom && get_meta(\"metadata\").items.slot1.amount < 99:
							var copying = get_meta(\"metadata\")
							copying.items.slot2.amount += 1
							set_meta(\"metadata\", copying.duplicate(true))
						area.queue_free()
						set_meta(\"metadata\", get_meta(\"metadata\").duplicate(true))
					metadatacopy.direction = get_meta(\"metadata\").direction
					return area.set_meta(\"metadata\", metadatacopy.duplicate(true))
		if get_meta(\"metadata\").items.slot1.amount == 0:
			var copying = get_meta(\"metadata\")
			copying.items.slot1.denom = null
			copying.items.slot1.icon = null
			set_meta(\"metadata\", copying.duplicate(true))
		if get_meta(\"metadata\").items.slot1.denom == null && get_meta(\"metadata\").items.slot2.denom != null:
			var copying = get_meta(\"metadata\")
			copying.items.slot1 = get_meta(\"metadata\").items.slot2
			copying.items.slot2 = {\"denom\": null, \"icon\": null, \"amount\": 0}.duplicate(true)
			set_meta(\"metadata\", copying.duplicate(true))
		set_meta(\"metadata\", get_meta(\"metadata\").duplicate(true))
		if get_node(\"ConvertTimer\").is_stopped() && get_meta(\"metadata\").items.slot1.denom != null:
			get_node(\"ConvertTimer\").start()
			yield(get_node(\"ConvertTimer\"), \"timeout\")
			var newplacing = null
			match get_meta(\"metadata\").items.slot1.denom:
				\"flush_sit\", \"bop\":
					newplacing = {
						\"type\": \"item\",
						\"denom\": \"bop\",
						\"name\": \"pussyfart\",
						\"desc\": \"pussy shit\",
						\"spritepath\": \"textures/items/bop.png\",
						\"direction\": null,
						\"colliding\": null,
						\"sell\": 200,
						\"placing\": false,
						\"justplaced\": true
					}.duplicate(true)
			var copying = get_meta(\"metadata\")
			if newplacing != null:
				copying.items.slot1.amount -= 1
				get_tree().current_scene.place_item_now(\"res://scene/item.tscn\", newplacing.duplicate(true), position)
				if get_meta(\"metadata\").items.slot1.amount == 0:
					copying.items.slot1.denom = null
					copying.items.slot1.icon = null
				if get_meta(\"metadata\").items.slot1.denom == null && get_meta(\"metadata\").items.slot2.denom != null:
					copying.items.slot1 = get_meta(\"metadata\").items.slot2
					copying.items.slot2 = {\"denom\": null, \"icon\": null, \"amount\": 0}.duplicate(true)
			set_meta(\"metadata\", copying.duplicate(true))

func timeout():
	get_node(\"ConvertTimer\").stop()


func electrical_dew():
	if !get_meta(\"metadata\").placing:
		get_tree().current_scene.due += self.get_meta(\"metadata\").elec
	get_node(\"ElecTimer\").start()


func on_input_event(_viewport, event, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_RIGHT and inventory_open == false and get_meta(\"metadata\").placing == false:
		add_child(load(\"res://scene/MachineInventory.tscn\").instance())
		inventory_open = true


func _on_TextureProgress_gui_input(event):
	if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_RIGHT and inventory_open == false and get_meta(\"metadata\").placing == false:
		add_child(load(\"res://scene/MachineInventory.tscn\").instance())
		inventory_open = true
"

[sub_resource type="GDScript" id=3]
script/source = "extends TextureProgress
"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32, 32 )

[node name="Machine" type="Area2D"]
script = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 32, 32 )
texture = ExtResource( 1 )
region_rect = Rect2( 0, 0, 64, 64 )

[node name="TextureProgress" type="TextureProgress" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_right = 64.0
margin_bottom = 64.0
rect_pivot_offset = Vector2( 32, 32 )
mouse_filter = 2
input_pass_on_modal_close_click = false
max_value = 5.0
step = 0.01
value = 5.0
texture_under = ExtResource( 3 )
texture_progress = ExtResource( 2 )
fill_mode = 3
script = SubResource( 3 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 32, 32 )
shape = SubResource( 1 )

[node name="ConvertTimer" type="Timer" parent="."]

[node name="ElecTimer" type="Timer" parent="."]

[connection signal="input_event" from="." to="." method="on_input_event"]
[connection signal="gui_input" from="TextureProgress" to="." method="_on_TextureProgress_gui_input"]
[connection signal="timeout" from="ConvertTimer" to="." method="timeout"]
[connection signal="timeout" from="ElecTimer" to="." method="electrical_dew"]
