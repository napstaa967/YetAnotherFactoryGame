[gd_scene load_steps=4 format=2]

[ext_resource path="res://textures/conveyor/normal/down.png" type="Texture" id=1]

[sub_resource type="GDScript" id=7]
resource_local_to_scene = true
script/source = "extends Area2D

signal conveyor_move

export(Dictionary) var metadata = {
	\"speed\": 1,
	\"type\": \"conveyor\",
	\"direction\": \"down\",
	\"type2\": \"normal\"
}
onready var type = \"conveyor\"
var busy = false

func _ready():
	metadata = get_meta(\"metadata\")
	if(metadata.type2 == \"splitter\"):
		if (metadata.horientation == \"left_right\"):
			metadata.direction = \"left\"
		if (metadata.horientation == \"down_up\"):
			metadata.direction = \"down\"
	set_meta(\"metadata\", metadata)
	get_child(2).set_wait_time(1)
	get_child(2).one_shot = true
	monitoring = true
	print(get_meta(\"metadata\").direction)
	var texturestuff
	if get_meta(\"metadata\").type2 == \"splitter\":
		texturestuff = \"textures/conveyor/{type}/{hori}.png\".format({\"hori\": get_meta(\"metadata\").horientation, \"type\": get_meta(\"metadata\").type2})
	else:
		texturestuff = \"textures/conveyor/{type}/{direction}.png\".format({\"direction\": get_meta(\"metadata\").direction, \"type\": get_meta(\"metadata\").type2})
	print(texturestuff)
	get_child(1).texture = Main.load_texture(texturestuff)
	get_child(1).scale = Vector2(64/get_child(1).texture.get_size().x, 64/get_child(1).texture.get_size().y)

func _on_test_conveyor_body_entered(_body):
	emit_signal(\"conveyor_move\")

func _process(_delta):
	var areas = get_overlapping_areas()
	var itemareas = []
	for area in areas:
		if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").type != \"remove\":
			if area.get_meta(\"metadata\").type == \"item\":
				itemareas.append(area)
			if area.get_meta(\"metadata\").type != \"item\":
				if area.position == position:
					return area.free()
	for area in itemareas:
		if area.has_meta(\"metadata\"):
			var metadatacopy = area.get_meta(\"metadata\")
			if ((area.position.x == position.x && area.position.y == position.y) || metadatacopy.direction == null) && area.get_child(2).get_overlapping_areas().has(self):
				if get_meta(\"metadata\").type2 == \"normal\":
					metadatacopy.direction = get_meta(\"metadata\").direction
					return area.set_meta(\"metadata\", metadatacopy.duplicate())
				if get_meta(\"metadata\").type2 == \"splitter\":
					metadatacopy.direction = get_meta(\"metadata\").direction
					area.set_meta(\"metadata\", metadatacopy.duplicate())
					metadata = get_meta(\"metadata\")
					if (metadata.horientation == \"left_right\"):
						print(\"lr\")
						if metadata.direction == \"left\":
							metadata.direction = \"right\"
							print(get_meta(\"metadata\").direction)
							return set_meta(\"metadata\", metadata)
							print(get_meta(\"metadata\").direction)
						if metadata.direction == \"right\":
							metadata.direction = \"left\"
							print(get_meta(\"metadata\").direction)
							return set_meta(\"metadata\", metadata)
							print(get_meta(\"metadata\").direction)
					if (metadata.horientation == \"down_up\"):
						if metadata.direction == \"down\":
							metadata.direction = \"up\"
							return set_meta(\"metadata\", metadata)
						if metadata.direction == \"up\":
							metadata.direction = \"down\"
							return set_meta(\"metadata\", metadata)
func area_exit(area):
	if (area.has_meta(\"metadata\") && area.get_meta(\"metadata\").type != \"conveyor\" && area.get_meta(\"metadata\").type != \"delayed_conveyor\") || (!area.get(\"innercollision\") == null && !area.innercollision):
		busy = false


"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32, 32 )

[node name="test_conveyor" type="Area2D" groups=["Conveyor"]]
script = SubResource( 7 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 32, 32 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 32, 32 )
texture = ExtResource( 1 )

[node name="DelayTimer" type="Timer" parent="."]

[connection signal="area_exited" from="." to="." method="area_exit"]
