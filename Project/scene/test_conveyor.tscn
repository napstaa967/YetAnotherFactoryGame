[gd_scene load_steps=4 format=2]

[ext_resource path="res://textures/conveyor/normal/down.png" type="Texture" id=1]

[sub_resource type="GDScript" id=7]
resource_local_to_scene = true
script/source = "extends Area2D

signal conveyor_move

export(Dictionary) var metadata = {
	\"speed\": 1,
	\"type\": \"conveyor\",
	\"direction\": \"down\",
	\"type2\": \"normal\"
}
onready var type = \"conveyor\"

func _ready():
	metadata = get_meta(\"metadata\")
	set_meta(\"metadata\", metadata)
	get_child(2).set_wait_time(1)
	get_child(2).one_shot = true
	monitoring = true
	var texturestuff
	if get_meta(\"metadata\").type == \"splitter\":
		texturestuff = \"textures/conveyor/splitter/{hori}.png\".format({\"hori\": get_meta(\"metadata\").horientation, \"type\": get_meta(\"metadata\").type})
	if get_meta(\"metadata\").type == \"trisplitter\":
		texturestuff = \"textures/conveyor/splitter/threeway/{hori}.png\".format({\"hori\": get_meta(\"metadata\").horientation, \"type\": get_meta(\"metadata\").type})
	if get_meta(\"metadata\").type == \"conveyor\":
		texturestuff = \"textures/conveyor/normal/{direction}.png\".format({\"direction\": get_meta(\"metadata\").direction, \"type\": get_meta(\"metadata\").type})
	print(texturestuff)
	get_child(1).texture = Main.load_texture(texturestuff)
	get_child(1).scale = Vector2(64/get_child(1).texture.get_size().x, 64/get_child(1).texture.get_size().y)

func _on_test_conveyor_body_entered(_body):
	emit_signal(\"conveyor_move\")

func _process(_delta):
	var areas = get_overlapping_areas()
	var itemareas = []
	for area in areas:
		if area.is_queued_for_deletion():
			break
		if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").type != \"remove\":
			if area.get_meta(\"metadata\").type == \"item\":
				itemareas.append(area)
			if area.get_meta(\"metadata\").type != \"item\":
				if area.position == position:
					return area.free()
	for area in itemareas:
		if area.is_queued_for_deletion():
			break
		if area.has_meta(\"metadata\"):
			var metadatacopy = area.get_meta(\"metadata\")
			if ((area.position.x == position.x && area.position.y == position.y) || metadatacopy.direction == null) && area.get_child(2).get_overlapping_areas().has(self):
				if get_meta(\"metadata\").type == \"conveyor\":
					metadatacopy.direction = get_meta(\"metadata\").direction
					return area.set_meta(\"metadata\", metadatacopy.duplicate())
				if get_meta(\"metadata\").type == \"splitter\":
					metadata = get_meta(\"metadata\")
					metadatacopy.direction = metadata.direction
					area.set_meta(\"metadata\", metadatacopy.duplicate())
					metadata = get_meta(\"metadata\")
					var thing = metadata.horientation.split(\"_\")
					if metadata.direction == thing[0]:
						metadata.direction = thing[1]
						return set_meta(\"metadata\", metadata.duplicate())
					if metadata.direction == thing[1]:
						metadata.direction = thing[0]
						return set_meta(\"metadata\", metadata.duplicate())
				if get_meta(\"metadata\").type == \"trisplitter\":
					metadata = get_meta(\"metadata\")
					metadatacopy.direction = metadata.direction
					area.set_meta(\"metadata\", metadatacopy.duplicate())
					metadata = get_meta(\"metadata\")
					var thing = metadata.horientation.split(\"_\")
					if metadata.direction == thing[0]:
						metadata.direction = thing[1]
						return set_meta(\"metadata\", metadata.duplicate())
					if metadata.direction == thing[1]:
						metadata.direction = thing[2]
						return set_meta(\"metadata\", metadata.duplicate())
					if metadata.direction == thing[2]:
						metadata.direction = thing[0]
						return set_meta(\"metadata\", metadata.duplicate())

"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32, 32 )

[node name="test_conveyor" type="Area2D" groups=["Conveyor"]]
script = SubResource( 7 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 32, 32 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 32, 32 )
texture = ExtResource( 1 )

[node name="DelayTimer" type="Timer" parent="."]
