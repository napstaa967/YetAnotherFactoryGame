[gd_scene load_steps=4 format=2]

[ext_resource path="res://textures/conveyor/normal/down.png" type="Texture" id=1]

[sub_resource type="GDScript" id=7]
resource_local_to_scene = true
script/source = "extends Area2D

signal conveyor_move

export(Dictionary) var metadata = {
	\"type\": \"conveyor\",
	\"direction\": \"down\",
	\"sell\": 100,
	\"buy\": 200,
	\"elec\": 3
}

func _ready():
	$ElecTimer.set_wait_time(1)
	$ElecTimer.start()
	metadata = get_meta(\"metadata\")
	set_meta(\"metadata\", metadata)
	$ProduceTimer.one_shot = true
	monitoring = true
	var texturestuff
	match get_meta(\"metadata\").type:
		\"splitter\":
			texturestuff = \"textures/conveyor/splitter/{hori}.png\".format({\"hori\": get_meta(\"metadata\").horientation, \"type\": get_meta(\"metadata\").type})
		\"trisplitter\":
			texturestuff = \"textures/conveyor/splitter/threeway/{hori}.png\".format({\"hori\": get_meta(\"metadata\").horientation, \"type\": get_meta(\"metadata\").type})
		\"conveyor\":
			texturestuff = \"textures/conveyor/normal/{direction}.png\".format({\"direction\": get_meta(\"metadata\").direction, \"type\": get_meta(\"metadata\").type})
		\"producer\":
			texturestuff = \"textures/producer/normal/{direction}.png\".format({\"direction\": get_meta(\"metadata\").direction, \"type\": get_meta(\"metadata\").type})
	$Sprite.texture = get_tree().current_scene.load_texture(texturestuff)
	$Sprite.scale = Vector2(64/$Sprite.texture.get_size().x, 64/$Sprite.texture.get_size().y)
	$Sprite.texture.set_flags(0)

func _on_test_conveyor_body_entered(_body):
	emit_signal(\"conveyor_move\")

func _process(_delta):
	if get_meta(\"metadata\").placing == true:
		$Sprite.z_index = 99
		return
	if get_meta(\"metadata\").placing == false:
		match get_meta(\"metadata\").type:
			\"conveyor\", \"splitter\", \"trisplitter\", \"producer\":
				var areas = get_overlapping_areas()
				var itemareas = []
				for area in areas:
					if area.is_queued_for_deletion():
						continue
					if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").placing == true:
						continue
					if area.has_meta(\"metadata\") && area.get_meta(\"metadata\").type != \"remove\":
						if area.get_meta(\"metadata\").type == \"item\":
							itemareas.append(area)
						if area.get_meta(\"metadata\").type != \"item\":
							if area.position == position:
								return area.free()
				for area in itemareas:
					if area.is_queued_for_deletion():
						continue
					if area.has_meta(\"metadata\"):
						var metadatacopy = area.get_meta(\"metadata\")
						if (area.position == position || metadatacopy.direction == null) && area.get_child(2).get_overlapping_areas().has(self):
							match get_meta(\"metadata\").type:
								\"conveyor\":
									metadatacopy.direction = get_meta(\"metadata\").direction
									return area.set_meta(\"metadata\", metadatacopy.duplicate(true))
								\"splitter\":
									metadata = get_meta(\"metadata\")
									metadatacopy.direction = metadata.direction
									area.set_meta(\"metadata\", metadatacopy.duplicate(true))
									metadata = get_meta(\"metadata\")
									var thing = metadata.horientation.split(\"_\")
									if metadata.direction == thing[0]:
										metadata.direction = thing[1]
										return set_meta(\"metadata\", metadata.duplicate(true))
									if metadata.direction == thing[1]:
										metadata.direction = thing[0]
										return set_meta(\"metadata\", metadata.duplicate(true))
								\"trisplitter\":
									metadata = get_meta(\"metadata\")
									metadatacopy.direction = metadata.direction
									area.set_meta(\"metadata\", metadatacopy.duplicate(true))
									metadata = get_meta(\"metadata\")
									var thing = metadata.horientation.split(\"_\")
									if metadata.direction == thing[0]:
										metadata.direction = thing[1]
										return set_meta(\"metadata\", metadata.duplicate(true))
									if metadata.direction == thing[1]:
										metadata.direction = thing[2]
										return set_meta(\"metadata\", metadata.duplicate(true))
									if metadata.direction == thing[2]:
										metadata.direction = thing[0]
										return set_meta(\"metadata\", metadata.duplicate(true))
								\"producer\":
									metadatacopy.direction = get_meta(\"metadata\").direction
									area.set_meta(\"metadata\", metadatacopy.duplicate(true))
				if get_meta(\"metadata\").type == \"producer\":
					continue
			\"producer\":
				$ProduceTimer.set_wait_time(5)
				if $ProduceTimer.is_stopped() == true:
					$ProduceTimer.start()
					var itemmeta = {
						\"type\": \"item\",
						\"denom\": \"flush_sit\",
						\"name\": \"pussyfart\",
						\"desc\": \"pussy shit\",
						\"spritepath\": \"textures/items/flushsit.png\",
						\"direction\": null,
						\"colliding\": null,
						\"sell\": 100,
						\"placing\": false,
						\"justplaced\": false
					}
					var itempos = position
					get_tree().current_scene.place_item_now(\"res://scene/item.tscn\", itemmeta.duplicate(true), itempos)
					$ProduceTimer.start()


func timeout():
	$ProduceTimer.stop()


func electrical_dew():
	get_tree().current_scene.due += get_meta(\"metadata\").elec
	$ElecTimer.start()
"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32, 32 )

[node name="test_conveyor" type="Area2D"]
script = SubResource( 7 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 32, 32 )
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 32, 32 )
shape = SubResource( 1 )

[node name="ProduceTimer" type="Timer" parent="."]

[node name="ElecTimer" type="Timer" parent="."]

[connection signal="timeout" from="ProduceTimer" to="." method="timeout"]
[connection signal="timeout" from="ElecTimer" to="." method="electrical_dew"]
